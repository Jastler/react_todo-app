{"version":3,"sources":["components/Footer.jsx","components/TodoFrom.jsx","components/TodoItem.jsx","components/TodoList.jsx","App.js","index.js"],"names":["Footer","completedTodos","activeTodos","setFilter","deleteCompletedTodos","className","length","href","onClick","event","target","textContent","type","TodoForm","updateTodos","useState","inputValue","setInputValue","onSubmit","preventDefault","createTodo","id","Date","title","completed","value","placeholder","onChange","TodoItem","todo","handleDelete","handleChecked","updateTodoTitle","isEditTodos","setIsEditTodos","todoValue","setTodoValue","console","log","classNames","editing","onDoubleClick","checked","onKeyDown","key","TodoList","todos","setTodos","hasToogleChecked","setHasToogleChecked","todoId","updateTitle","map","newTodos","filter","useEffect","htmlFor","App","filterTodos","useCallback","filterBy","filteredTodos","useMemo","newTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2301527a.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Footer = (\n  { completedTodos,\n    activeTodos,\n    setFilter,\n    deleteCompletedTodos },\n) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {activeTodos.length <= 1 ? (\n        `${activeTodos.length} item left`\n      ) : (\n        `${activeTodos.length} items left`\n      )}\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className=\"selected\"\n          onClick={(event) => {\n            setFilter(event.target.textContent);\n          }}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          onClick={(event) => {\n            setFilter(event.target.textContent);\n          }}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          onClick={(event) => {\n            setFilter(event.target.textContent);\n          }}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n    {!!completedTodos.length && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={deleteCompletedTodos}\n      >\n        Clear completed\n      </button>\n    )}\n  </footer>\n);\n","import React, { useState } from 'react';\n\nexport const TodoForm = ({ updateTodos }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInput = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const hanbleSubmit = (event) => {\n    event.preventDefault();\n\n    if (inputValue === '') {\n      return;\n    }\n\n    const createTodo = {\n      id: +new Date(),\n      title: inputValue,\n      completed: false,\n    };\n\n    updateTodos(createTodo);\n    setInputValue('');\n  };\n\n  return (\n    <form onSubmit={hanbleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={handleInput}\n      />\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({ todo, handleDelete, handleChecked, updateTodoTitle }) => {\n  const [isEditTodos, setIsEditTodos] = useState(false);\n  const [todoValue, setTodoValue] = useState(todo.title);\n\n  console.log(isEditTodos)\n\n  return (\n    <li\n      className={classNames(\n        { completed: todo.completed, editing: isEditTodos },\n      )}\n      onDoubleClick={() => {\n        setIsEditTodos(true);\n      }}\n    >\n      <div\n        className=\"view\"\n      >\n        {}\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={(event) => {\n            handleChecked(event, todo.id);\n          }}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            handleDelete(todo.id);\n          }}\n        />\n      </div>\n      <input\n        value={todoValue}\n        type=\"text\"\n        className=\"edit\"\n        onChange={(event) => {\n          setTodoValue(event.target.value);\n        }}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter') {\n            setIsEditTodos(false);\n            updateTodoTitle(todo.id, todoValue);\n            event.preventDefault();\n          }\n\n          if (event.key === 'Escape') {\n            setTodoValue(todo.title);\n            setIsEditTodos(false);\n          }\n        }}\n      />\n    </li>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ todos, setTodos }) => {\n  const [hasToogleChecked, setHasToogleChecked] = useState(false);\n\n  const toggleTodos = (event) => {\n    const newTodos = todos.map(todo => ({\n      ...todo,\n      completed: event.target.checked,\n    }));\n\n    setTodos(newTodos);\n  };\n\n  const updateTodoTitle = (todoId, todoValue) => {\n    const updateTitle = todos.map(todo => {\n      if (todo.id === todoId) {\n        return ({\n          ...todo,\n          title: todoValue,\n        });\n      }\n\n      return todo;\n    });\n\n    setTodos(updateTitle);\n  };\n\n  const handleChecked = (event, todoId) => {\n    const newTodos = todos.map(todo => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: event.target.checked,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(newTodos);\n  };\n\n  const handleDelete = (todoId) => {\n    const newTodos = todos.filter(todo => (\n      !(todo.id === todoId)\n    ));\n\n    setTodos(newTodos);\n  };\n\n  useEffect(() => {\n    const completedTodos = todos.filter(todo => todo.completed).length;\n\n    setHasToogleChecked(completedTodos === todos.length);\n  }, [todos]);\n\n  return (\n    <section className=\"main\">\n      {!!todos.length && (\n        <>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            checked={hasToogleChecked}\n            className=\"toggle-all\"\n            onChange={toggleTodos}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        </>\n      )}\n\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            handleChecked={handleChecked}\n            handleDelete={handleDelete}\n            updateTodoTitle={updateTodoTitle}\n          />\n        ))}\n\n        {/* <li className=\"completed\">\n          <div className=\"view\">\n            <input type=\"checkbox\" className=\"toggle\" />\n            <label>qwertyuio</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li> */}\n\n        {/* <li className=\"editing\">\n          <div className=\"view\">\n            <input type=\"checkbox\" className=\"toggle\" />\n            <label>zxcvbnm</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li> */}\n\n        {/* <li>\n          <div className=\"view\">\n            <input type=\"checkbox\" className=\"toggle\" />\n            <label>1234567890</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li> */}\n      </ul>\n    </section>\n  );\n};\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { Footer } from './components/Footer';\nimport { TodoForm } from './components/TodoFrom';\nimport { TodoList } from './components/TodoList';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [filter, setFilter] = useState('All');\n\n  const completedTodos = todos.filter(todo => todo.completed);\n  const activeTodos = todos.filter(todo => !todo.completed);\n\n  const updateTodos = (newTodo) => {\n    setTodos([...todos, newTodo]);\n  };\n\n  const filterTodos = useCallback((filterBy) => {\n    switch (filterBy) {\n      case 'Active':\n        return todos.filter(todo => !todo.completed);\n      case 'Completed':\n        return todos.filter(todo => todo.completed);\n      case 'All':\n      default: {\n        return todos;\n      }\n    }\n  }, [filter, todos]);\n\n  const filteredTodos = useMemo(\n    () => filterTodos(filter), [filter, filterTodos],\n  );\n\n  const deleteCompletedTodos = () => {\n    setTodos(activeTodos);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n        <TodoForm\n          updateTodos={updateTodos}\n        />\n      </header>\n\n      <TodoList\n        todos={filteredTodos}\n        setTodos={setTodos}\n      />\n\n      {!!todos.length && (\n        <Footer\n          completedTodos={completedTodos}\n          activeTodos={activeTodos}\n          todos={filteredTodos}\n          setFilter={setFilter}\n          deleteCompletedTodos={deleteCompletedTodos}\n        />\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}